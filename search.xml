<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[【面试前传】JS中的一些小问题（一）]]></title>
    <url>%2F2019%2F04%2F15%2F%E3%80%90%E9%9D%A2%E8%AF%95%E5%89%8D%E4%BC%A0%E3%80%91JS%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E9%97%AE%E9%A2%98%EF%BC%88%E4%B8%80%EF%BC%89%2F</url>
    <content type="text"><![CDATA[####本节概要 1，原始类型与对象类型2，typeof和instanceof的原理与区别 ####一、原始类型学过ES6的小伙伴们都知道，原始类型呢，主要分为六种分别是 Boolean,Null,Undefined,Number,String,Symbol 当然，这些类型的详细概念就不用我多做解释啦，只不过，小宏同学在学习时对Symbol不是特别理解，多亏大佬的帮忙，小伙伴们若想对Symbol了解的更详细的话，不妨参考一下如下文章，或许会有所帮助。 ES6的原始类型数据——Symbol 接下来我们就说说这里的小问题 首先嘛，NULL不是对象，但是细心的小伙伴们会发现当你打印typeof null的值的时候，返回的却是Object？？这是为什么呢？]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>-JS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[前言]]></title>
    <url>%2F2019%2F01%2F13%2F%E5%89%8D%E8%A8%80%2F</url>
    <content type="text"><![CDATA[关于js 基于对象 &lt;script language=&quot;javascript&quot;&gt;&lt;/script&gt; Firefox 和 IE存在大量兼容性问题,其主要原因是他们对js的支持不同 ajax技术一定要使用JavaScript 字符串 截取www.i7xy.cn中的i7xy? 123let str = 'www.i7xy.cn'str = str.substr(4,4) // 开始,截取长度console.log(str) 判断字符串,第一个必须为字母,后面可以是字母,数字,下划线,总长度为5~20 \w表示任意字母,数字,下划线; {n}匹配多少位 123456const reg = /^[a-zA-Z]&#123;1&#125;\w&#123;4,19&#125;$/console.log(reg.test('i7xy')) // falseconsole.log(reg.test('i7xy.cn')) // falseconsole.log(reg.test('7_i7xy')) // falseconsole.log(reg.test('i7xy_cn')) // trueconsole.log(reg.test('i7xy_xx_666666666')) // true 编写一个方法,求字符串长度 1234567const getLen = Str =&gt; &#123; return Str.length&#125;console.log(getLen('abcde')) // 5console.log(getLen('hello'))console.log(getLen('i7xy')) // 4console.log(getLen('arley')) 找出字符串arley_i7xy.cn_666中的i7xy 12345const str = 'arley_i7xy.cn_666'const searchText = 'i7xy'const s1 = str.substring(str.indexOf(searchText),str.indexOf(searchText) + searchText.length)const s2 = str.substr(str.indexOf(searchText),searchText.length)console.log(s1,s2) 模拟PHP的$_GET方法,获取链接参数 12345678910111213const $_GET = (name) =&gt; &#123; const url = '?name=arley&amp;age=18&amp;sex=superman' // const url = location.href.search var reg = new RegExp("(^|&amp;)" + name + "=([^&amp;]*)(&amp;|$)", "i") var r = url.substr(1).match(reg) console.log(r) // Array(4) ["name=arley&amp;", "", "arley", "&amp;"] if (r != null) return unescape(r[2]) // 返回解码的字符串 return null&#125;console.log($_GET('name'))console.log($_GET('age'))console.log($_GET('sex')) match匹配成功时会返回数组： 如果正则为全局匹配，那么数组的第一个及以后元素存放的都是匹配的字符串，不再存放匹配的分组 如果正则不为全局匹配，那么数组的第一个元素存放的是匹配的字符串，第二个及以后元素存放的是匹配的分组 删除一个字符串左边的空白字符 123456const leftTrim = str =&gt; &#123; return str.replace(/^\s*/g,"")&#125;console.log(leftTrim(" arley"))console.log(leftTrim(" i7xy")) typeof返回 12345678910console.log(typeof(null)) // objectconsole.log(typeof(undefined)) // undefinedconsole.log(typeof("arley")) // stringconsole.log(typeof("1"===1)) // booleanconsole.log(typeof(1)) // numberconsole.log(typeof(NaN)) // numberconsole.log(typeof(function()&#123;&#125;)) // functionconsole.log(typeof(["a"])) // objectconst arr = ["a","b","c"]console.log(typeof(arr)) // object “5”+3 = 53 字符串反转函数 12345const revStr = str =&gt; &#123; return str.split('').reverse().join('')&#125;console.log(revStr("abcde")) 变量 全局变量: 在当前页面内有效 undefined由null派生而来,undefinded是声明了变量,但为赋值,null是找不到对象. window的属性 js刷新页面 123location.reload(true) // true 服务端获取刷新 , false 缓存中获取刷新location.replace(location.href) 元素 方法 12345678appendChild() // 添加节点removeChild() // 移除节点cloneNode() // 复制节点createElement() // 创建元素createTextnode() // 用指定的文本创建新的Element节点getElementByIdgetElementsByTagNamegetElementsByName 追加元素 123456789101112131415append()// HTML代码为&lt;p&gt;I come from &lt;/p&gt;&lt;p&gt;I love &lt;/p&gt;// 向所有p标签中追加一个单词china，则写法为 $("p").append("china");// 结果为：&lt;p&gt;I come from china&lt;/p&gt;&lt;p&gt;I love china &lt;/p&gt;appendTo()// HTML代码为&lt;b&gt;I love china &lt;/b&gt;&lt;p&gt;&lt;/p&gt;// 把标签b追加到p元素中，写法为$("b").appendTo("p");// 结果为：&gt;&lt;p&gt;&lt;b&gt;I love china &lt;/b&gt;&lt;/p&gt;// 使用appendTo这个方法是颠倒了常规的$(A).append(B)的操作，即不是把B追加到A中，而是把A追加到B中。 1234567891011/* 1.html方法，给元素添加html代码或者清空html代码（参数为空字符串）；2.append向元素的末尾添加html代码；3.appendTo这个方法跟append方法的很像，只是要添加的html代码的目标有所不一样；4.after向元素的后边添加html代码，如果元素后面有元素了，那将后面的元素后移，然后将html代码插入；5.before向元素的前边添加html代码，如果元素前面有元素了，那将前面的元素前移，然后将html代码插入；6.insertAfter将JQuery封装好的元素插入到指定元素的后面，如果元素后面有元素了，那将后面的元素后移，然后将JQuery对象插入；7.insertBefore将JQuery封装好的元素插入到指定元素的前面，如果元素前面有元素了，那将前面的元素前移，然后将JQuery对象插入；8.empty清空元素内部的html代码，它只是清空内部的html代码，但是标记仍然留在DOM中；9.remove从DOM中移除整个元素*/]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
</search>
